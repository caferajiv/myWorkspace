package hacker.ds.linkedlist;

public class Test {
		    

	Node InsertNth(Node head, int data, int position) {
	   Node node = new Node ();
	   node.next = null;
	   node.data = data;
	    
	    if(head == null){
	        head = node;
	        return head;
	    }
	    Node temp = head;
	    int count=0;
	    if(count==position){
	        node.next= head;
	        head = node;
	       return head;
	    }
	    while (temp.next!=null && count!=position){
	        count++;
	        if(count<position){
	            temp = temp.next; 
	        }else {
	            node.next = temp.next;
	            temp.next = node;
	            return head;
	        }
	        
	    }
	    
	    
	    return head;
	    
	    
	}
	
	Node Reverse(Node head) {
		
		if(head == null || head.next == null)
        return head;
    
    Node temp = head;
    Node current = new Node();     
    Node previous = null;
    current = temp;
    
    while(temp.next!=null){
        temp = temp.next;
        current.next = previous;
        previous = current;
        current = temp;

        
    }
    current.next= previous;
    head = current;
    return head;
    
	}
	
	int CompareLists(Node headA, Node headB) {
		
	    // This is a "method-only" submission. 
	    // You only need to complete this method 
		if(headA==null && headB == null)
			return 1;
		
		boolean same = false;
		while(headA !=null && headB != null){
			if(headA.data == headB.data){
				headA = headA.next;
				headB = headB.next;	
			}else 
			{
				return 0;
			}
		}
		if(headA!=null && headB==null || headA==null && headB!=null){
			return 0;
		}
		
		return 1;
	
	}
	
	Node MergeLists(Node headA, Node headB) {
	     // This is a "method-only" submission. 
	     // You only need to complete this method 
		Node newHead =  new Node();
		Node temp = newHead;
		while(headA!=null && headB!=null){
			while(headA.next!=null && headA.data<=headB.data){
				newHead.data = headA.data;
				newHead.next = headA.next;
				headA = headA.next;
				
			}
			while(headB.next!=null && headA.data>headB.data){
				headB = headB.next;
			}
			
			if(headA.data<=headB.data){
				Node tempB = headB;
				headB = headB.next;
				temp.next= headA.next.next;
				headA.next = temp;
			}else {
				Node tempB = headB.next;
				headB.next = headA;
				headB = temp;
			}
		}

		return headA;
	}

	public static void main(String[] args) {
		String str = "rajiv kumar";

		System.out.println(str.substring(7));
	}
	
	
	
	 class Node {
	     int data;
	     Node next;
	  }

}
